service: "yams-${env:ENV}"

provider:
  name:       aws
  runtime:    nodejs6.10
  region:     ${env:AWS_DEFAULT_REGION, 'us-west-2'}
  stage:      ${opt:stage}
  memorySize: 512
  timeout:    6

  environment:
    SMTP_HOST: "${env:SMTP_HOST}"
    SMTP_PORT: "${env:SMTP_PORT}"
    ENV_NAME:  "${env:ENV}"

  vpc:
    securityGroupIds:
      - { Ref: lambdaVpcSecurityGroup }
    subnetIds: { Fn::Split: [ "\t" , "${env:VPC_SUBNETS}" ] }

package:
  include:
    - node_modules/*
    - src/*.js
  exclude:
    - venv

functions:
  send:
    handler: src/send.send
    events:
      - stream:
          type:             kinesis
          arn:              { Fn::GetAtt: [ KinesisStream, Arn ] }
          batchSize:        100
          startingPosition: TRIM_HORIZON

resources:
  Resources:
    KinesisStream:
      Type: 'AWS::Kinesis::Stream'
      Properties:
        Name:       "yams-${env:ENV}-send"
        ShardCount: 1
    lambdaVpcSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupName:        "${self:service}-${opt:stage}-vpc-sg"
        GroupDescription: 'allow lambda function to access vpc'
        VpcId:            "${env:VPC_ID}"
        SecurityGroupIngress:
          - IpProtocol: tcp
            CidrIp:     0.0.0.0/0
            FromPort:   "${env:SMTP_PORT}"
            ToPort:     "${env:SMTP_PORT}"
    lambdaVpcRole:
      Type: 'AWS::IAM::Role'
      Properties:
        Path:     /
        RoleName: "${self:service}-${opt:stage}-lambda-vpc"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Action: 'sts:AssumeRole'
              Principal:
                Service:
                  - lambda.amazonaws.com
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
